using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SplititActorsApi.Data;
using SplititActorsApi.Models;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SplititActorsApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ActorsController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public ActorsController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: api/actors
        [HttpGet]
        public async Task<ActionResult<IEnumerable<object>>> GetActors(
            string name = "", 
            int? minRank = null, 
            int? maxRank = null, 
            int page = 1, 
            int pageSize = 10)
        {
            var query = _context.Actors.AsQueryable();

            if (!string.IsNullOrEmpty(name))
                query = query.Where(a => a.Name.Contains(name));

            if (minRank.HasValue)
                query = query.Where(a => a.Rank >= minRank.Value);

            if (maxRank.HasValue)
                query = query.Where(a => a.Rank <= maxRank.Value);

            var paginatedActors = await query
                .Skip((page - 1) * pageSize)
                .Take(pageSize)
                .Select(a => new { a.Id, a.Name })
                .ToListAsync();

            return Ok(paginatedActors);
        }

        // GET: api/actors/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Actor>> GetActor(int id)
        {
            var actor = await _context.Actors.FindAsync(id);
            if (actor == null) return NotFound();
            return actor;
        }

        // POST: api/actors
        [HttpPost]
        public async Task<ActionResult<Actor>> AddActor(Actor actor)
        {
            if (_context.Actors.Any(a => a.Rank == actor.Rank))
                return BadRequest("Duplicate rank is not allowed.");

            _context.Actors.Add(actor);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetActor), new { id = actor.Id }, actor);
        }

        // PUT: api/actors/5
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateActor(int id, Actor actor)
        {
            if (id != actor.Id) return BadRequest();

            if (_context.Actors.Any(a => a.Id != id && a.Rank == actor.Rank))
                return BadRequest("Duplicate rank is not allowed.");

            _context.Entry(actor).State = EntityState.Modified;
            await _context.SaveChangesAsync();
            return NoContent();
        }

        // DELETE: api/actors/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteActor(int id)
        {
            var actor = await _context.Actors.FindAsync(id);
            if (actor == null) return NotFound();

            _context.Actors.Remove(actor);
            await _context.SaveChangesAsync();
            return NoContent();
        }
    }
}
